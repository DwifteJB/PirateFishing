/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 man.glb --transform 
Files: man.glb [1.48MB] > /Users/rmfosho/PROJECTS/WebFIshingPirate/public/man-transformed.glb [461.85KB] (69%)
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations, useGLTF } from '@react-three/drei' //useAnimations
import { SkeletonUtils } from 'three-stdlib'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    mixamorigHips: THREE.Bone
    Cube: THREE.SkinnedMesh
  }
  materials: {
    'Material.001': THREE.MeshStandardMaterial
  }
}


export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>(null)
  const { scene, animations } = useGLTF('/man-transformed.glb') as GLTFResult // animations
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)

  useEffect(() => {
    if (actions && actions.idle) actions.idle.play();
  }, [actions])
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
        </group>
        <skinnedMesh name="Cube" geometry={nodes.Cube.geometry} material={materials['Material.001']} skeleton={nodes.Cube.skeleton} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      </group>
    </group>
  )
}

useGLTF.preload('/man-transformed.glb')
